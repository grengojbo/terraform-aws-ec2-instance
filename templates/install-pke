#!/bin/bash

# SUDO_USER=centos

# cat <<EOT > pke-etcd.yaml
# cacertpath: /etc/etcd/pki
# certpath: /etc/etcd/pki
# cacert: /etc/etcd/pki/ca.crt
# cert: /etc/etcd/pki/root.crt
# key: /etc/etcd/pki/root.key
# EOT

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

DT_START=$(date)

# export CLUSTER_NAME=""
test ! -f /.env || export $(grep -v '^#' /.env | xargs -d '\n')
# export

while test ! -f /.first
do
  echo "[$(date)] - still trying"
  sleep 1
done
echo "[$(date)] done install packages..."
echo "------------------------------------------------------------------------"
# exit 0;


export EXTERNAL_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4 2>/dev/null)
export INTERNAL_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4 2>/dev/null)

DNS_ALT="localhost"
if [[ "${domain_private}" != "none" ]]; then
  DNS_ALT="${DNS_ALT},${node_name}.${domain_private},${NAME}.${domain_private}"
fi
if [[ "${domain_public}" != "none" ]]; then
  DNS_ALT="${DNS_ALT},${node_name}.${domain_public},${NAME}.${domain_public}"
fi

if [[ "${etcd_enabled}" == "true" ]]; then
  if [[ ! -f "/.installed-etcd" ]]; then

    curl -Lo /usr/bin/pke-etcd https://banzaicloud.com/downloads/pke-etcd/pke-etcd-${pke_etcd_version} 2>/dev/null
    chmod +x /usr/bin/pke-etcd


    echo "Install ETCD role: ${role} DNS: ${DNS_ALT}"
    echo "------------------------------------------------------------------------"
    if [[ "${role}" == "master" ]]; then
      echo "ETCD ip: ${INTERNAL_IP}"

      aws s3api head-object --bucket ${s3_bucket} --key ${bucket_data}/pki-${etcd_cluster_name}/ca.key || not_exist=true
      if [ $not_exist ]; then
        echo "Install CA certificates"
        echo "------------------------------------------------------------------------"
        /usr/bin/pke-etcd cert ca
        /usr/bin/pke-etcd cert server --name "${NAME}" --dnsaltnames "$(hostname),${DNS_ALT}" --ipaltnames="127.0.0.1,${INTERNAL_IP},${EXTERNAL_IP}"
        /usr/bin/pke-etcd cert client --clientname root --basename root
      else
        echo "Load CA certificates from s3"
        echo "------------------------------------------------------------------------"
        aws s3 sync s3://${s3_bucket}/${bucket_data}/pki-${etcd_cluster_name}/ /etc/etcd/pki/ --exclude 'peer.*' --exclude 'server.*'
        /usr/bin/pke-etcd cert server --name "${NAME}" --dnsaltnames "$(hostname),${DNS_ALT}" --ipaltnames="127.0.0.1,${INTERNAL_IP},${EXTERNAL_IP}"
      fi
    
      if [[ "${etcd_recovery}" == "true" ]]; then
        echo "TODO: Recovery CA certificates"
        echo "------------------------------------------------------------------------"
      fi
      /usr/bin/pke-etcd install seed --name "${NAME}" \
        --client-url "https://${INTERNAL_IP}:2379" \
        --peer-url "https://${INTERNAL_IP}:2380" \
        --listen-client-urls "https://0.0.0.0:2379" \
        --listen-peer-urls "https://${INTERNAL_IP}:2380"

      # tar -czf "/tmp/pki-${etcd_cluster_name}.tar.gz" --overwrite --exclude '.*' --one-file-system "/etc/etcd/pki" 2>&1 | grep -v  "Removing leading"
      # aws s3 cp /tmp/pki-${etcd_cluster_name}.tar.gz s3://${s3_bucket}/${bucket_data}/pki-${etcd_cluster_name}.tar.gz
      # echo "--------------------------------------"
      #echo "aws s3 sync /etc/etcd/pki s3://${s3_bucket}/${bucket_data}/pki-${etcd_cluster_name}/ --exclude 'peer.*' --exclude 'server.*'"
      # echo "--------------------------------------"
      # rm -f /tmp/pki-${etcd_cluster_name}.tar.gz 

      # if [[ "${etcd_recovery}" == "false" ]]; then
      echo "Send CA certificates to s3"
      echo "------------------------------------------------------------------------"
      aws s3 sync /etc/etcd/pki s3://${s3_bucket}/${bucket_data}/pki-${etcd_cluster_name}/ --exclude 'peer.*' --exclude 'server.*'
      # fi
      # TODO: The request signature we calculated does not match the signature you provided. Check your key and signing method.
      # pke-etcd snapshot save-s3 --region="${s3_region}" --bucket="${s3_bucket}/${bucket_data}"   --install-scheduled --schedule="*/10 * * * *" --endpoints="https://${INTERNAL_IP}:2379" --config="/root/pke-etcd.yaml"

      #echo "[$DT_START] Start" >> ${HOME}/.installed-etcd
      #echo "[$(date)] End" >>  ${HOME}/.installed-etcd
    else
      if [[ "${etcd_wait_first_node}" == "true" ]]; then
        echo "wait start first etcd node"
        echo "------------------------------------------------------------------------"
        while ! curl http://${etcd_join}:2379/healt
        do
          echo "[$(date)] still trying to ${etcd_join}"
          sleep 1
        done
      else
        done=0
        IFS=$'\n'
        for i in $(aws ec2 describe-instances --query "Reservations[*].Instances[*].PrivateIpAddress" --output=text --region=${s3_region} --filter "Name=tag-key,Values=etcd.io/cluster/${node_name}")
        do
          if [[ "$done" -ne 0 ]]; then
            break
          fi
          if [[ "${INTERNAL_IP}" != "${i}" ]]; then
            # echo "ETCD join ip:  ${etcd_join}"
            echo "ETCD join ip:  ${i}"
            echo "------------------------------------------------------------------------"
            done=1
            etcd_join=${i}
            while ! curl http://${etcd_join}:2379/healt
            do
              echo "[$(date)] still trying to ${etcd_join}"
              sleep 1
            done
          fi
        done
      fi
      echo "[$(date)] connected successfully to http://${etcd_join}:2379/healt"
      echo "------------------------------------------------------------------------"
      # echo "[$(date)] connected successfully to http://${etcd_join}:2379/healt"
      
      # aws s3 cp s3://${s3_bucket}/${bucket_data}/pki-${etcd_cluster_name}.tar.gz /tmp/pki-${etcd_cluster_name}.tar.gz
      # mkdir -p /etc/etcd/pki
      # cp /tmp/etc/etcd/pki/{ca,root}.* /etc/etcd/pki/
      # rm -Rf /tmp/etc
      # rm -Rf /tmp/pki-iwis1.tar.gz
      aws s3 sync s3://${s3_bucket}/${bucket_data}/pki-${etcd_cluster_name}/ /etc/etcd/pki/ --exclude 'peer.*' --exclude 'server.*'
      /usr/bin/pke-etcd cert server --name "${NAME}" --dnsaltnames "$(hostname),${DNS_ALT}" --ipaltnames="127.0.0.1,${INTERNAL_IP},${EXTERNAL_IP}"
      
      echo "------------------------------------------------------------------------"
      /usr/bin/pke-etcd install member --name "${NAME}" \
        --client-url "https://${INTERNAL_IP}:2379" \
        --peer-url "https://${INTERNAL_IP}:2380" \
        --listen-client-urls "https://0.0.0.0:2379" \
        --listen-peer-urls "https://${INTERNAL_IP}:2380" \
        --join "https://${etcd_join}:2379/healt"
    fi
    
    sudo yum -y update
  
  else
    echo "ETCD is installed..."
  fi
  echo "[$DT_START] Start" >> /.installed-etcd
  echo "[$(date)] End" >>  /.installed-etcd

    #  --snapshot-hash-check          perform hash check when restoring from snapshot
        # --snapshot-path string         etcd snapshot path. If set data will be restored automatically before installing
        # --snapshot-s3-bucket string    aws s3 bucket to get the snapshot from
        # --snapshot-s3-path string      aws s3 path that holds the snapshot
        # --snapshot-s3-region string    aws region to get the snapshot from
else
  echo "ETCD disabled..."
fi
if [[ "${k8s_enabled}" == "true" ]]; then
  echo "Install Kubernetes role: ${role}"
else
  echo "Kubernetes disabled..."
fi


  # export CLUSTER_NAME=""

  # export EXTERNAL_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
  # export INTERNAL_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)

  # export MAC=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/)
  # export VPC_CIDR=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$MAC/vpc-ipv4-cidr-block/)

  # curl -vL https://banzaicloud.com/downloads/pke/latest -o /usr/local/bin/pke
# chmod +x /usr/local/bin/pke
# export PATH=$PATH:/usr/local/bin/

# pke install master \
# --kubernetes-advertise-address=${INTERNAL_IP} \
# --kubernetes-api-server=${EXTERNAL_IP}:6443 \
# --kubernetes-cloud-provider=aws \
# --kubernetes-cluster-name=${CLUSTER_NAME} \
# --kubernetes-infrastructure-cidr=${VPC_CIDR}

# mkdir -p $HOME/.kube
# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
# chown $(id -u):$(id -g) $HOME/.kube/config